package com.example.netsdkdemo;

import java.util.ArrayList;
import java.util.HashMap;

import android.app.Activity;
import android.content.Intent;
import android.media.AudioFormat;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.Button;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.Toast;

import com.xm.FileData;
import com.xm.FindInfo;
import com.xm.MyConfig;
import com.xm.MyConfig.AudioState;
import com.xm.MyConfig.PlayState;
import com.xm.NetSdk;
import com.xm.NetSdk.OnRPlayBackCompletedListener;
import com.xm.audio.AudioParam;
import com.xm.audio.VoiceIntercom;
import com.xm.video.MySurfaceView;
/**
 * 
 *@project NetSdkDemo 
 *@author huangwanshui
 *@date 2013-11-1 下午05:13:11
 *@describe 录像回放
 */
public class PlayBackActivity extends Activity{
	private MySurfaceView mPlayBackVV;
	private MySurfaceView mPlayBackVV2;
	private Button mSearchBtn;
	private Button mStopBtn;
	private Button mPauseBtn;
	private Button mResumeBtn;
	private Button mFPlayBtn;
	private Button mSPlayBtn;
	private Button mStopDlBtn;
	private ListView mFileList;
	private NetSdk mNetSdk;
	private FileData[][] mFileData;
	private long mLoginId;
	private long mlPlayHandle;
	private long mlPlayHandle2;
	private long mlDownLoadHandle;
	private VoiceIntercom mVoiceIntercom = null;//语音对讲
	private int mCount = 0;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.playback);
		init();
		mFileData = new FileData[2][50];
	}
	private void init() {
		Intent it = getIntent();
		mLoginId = it.getLongExtra("loginId", 0);
		mNetSdk = NetSdk.getInstance();
		/**
		 * 设置回放进度监听
		 */
		mNetSdk.setOnRPlayBackCompletedListener(new OnRPlayBackCompletedListener() {
			
			@Override
			public void onRPlayBackCompleted(long lPlayHandle, long lTotalSize,
					long lDownLoadSize, long dwUser) {
				// TODO Auto-generated method stub
				if(lPlayHandle == mlPlayHandle) {
					System.out.println("lDownLoadSize："+lDownLoadSize);
				}else if(lPlayHandle == mlDownLoadHandle) {
					System.out.println("文件总大小为:"+lTotalSize+" 目前已经下载:"+lDownLoadSize);
				}
				
				
			}
		});
		mPlayBackVV = (MySurfaceView) findViewById(R.id.playback_vv);
		mPlayBackVV2 = (MySurfaceView) findViewById(R.id.playback_vv2);
		mPlayBackVV.init(getApplicationContext(), 0);
		mPlayBackVV.setAudioCtrl(AudioState.CLOSED);
		mPlayBackVV2.init(getApplicationContext(), 1);
		mPlayBackVV2.setAudioCtrl(AudioState.CLOSED);
		//语音对讲初始化
		AudioParam audioParam = getAudioParam();
		mVoiceIntercom = new VoiceIntercom(myHandler, audioParam,PlayBackActivity.this);
		mSearchBtn = (Button) findViewById(R.id.search);
		mStopBtn = (Button) findViewById(R.id.stop);
		mPauseBtn = (Button) findViewById(R.id.pause);
		mFPlayBtn = (Button) findViewById(R.id.kf);
		mSPlayBtn = (Button) findViewById(R.id.mf);
		mStopDlBtn = (Button) findViewById(R.id.stopdl);
		//暂停回放
		mPauseBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(mlPlayHandle > 0) {
					mNetSdk.PlayBackControl(mlPlayHandle, MyConfig.PlayBackAction.SDK_PLAY_BACK_PAUSE, 0);
					mPlayBackVV.onPause();
				}
			}
		});
		mResumeBtn = (Button) findViewById(R.id.resume);
		/*
		 * 恢复回放
		 */
		mResumeBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(mlPlayHandle > 0) {
					mPlayBackVV.onPlay();
					mNetSdk.PlayBackControl(mlPlayHandle, MyConfig.PlayBackAction.SDK_PLAY_BACK_CONTINUE, 0);
				}
			}
		});
		mFileList = (ListView) findViewById(R.id.filelist);
		/**
		 * 查询录像回放文件
		 */
		mSearchBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				ArrayList<HashMap<String,Object>> list = onSearchFile();
				SimpleAdapter adapter = new SimpleAdapter(PlayBackActivity.this, list, R.layout.filelist,
						new String[]{"filename"},new int[]{R.id.filelist_tv});
				mFileList.setAdapter(adapter);
			}
		});
		/*
		 * 播放录像文件
		 */
		mFileList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
//				FileData filedata = mFileData[0][arg2];
//				System.out.println("filedata:"+filedata.sFileName);
//				filedata.ch = 0;
//				mlPlayHandle = mNetSdk.PlayBackByName(0,mLoginId,filedata,1);
//				if(mlPlayHandle > 0) {
//					Toast.makeText(getApplicationContext(), "打开成功", Toast.LENGTH_SHORT).show();
//					mPlayBackVV.initData();
//				}else 
//					Toast.makeText(getApplicationContext(), "打开失败", Toast.LENGTH_SHORT).show();
			}
		});
		mFileList.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
					int arg2, long arg3) {
				// TODO Auto-generated method stub
				FileData filedata = mFileData[0][arg2];
				System.out.println("filedata:"+filedata.sFileName);
				filedata.ch = 0;
				mlDownLoadHandle = mNetSdk.GetFileByName(0,mLoginId,filedata,Environment.getExternalStorageDirectory()+"/DemoFile.h264",1);
				if(mlDownLoadHandle > 0) {
					Toast.makeText(getApplicationContext(), "正在下载", Toast.LENGTH_SHORT).show();
				}else 
					Toast.makeText(getApplicationContext(), "下载失败", Toast.LENGTH_SHORT).show();
				return false;
			}
		});
		/*
		 * 停止回放
		 */
		mStopBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				boolean ret = mNetSdk.StopPlayBack(mlPlayHandle);
				if(ret) {
					mPlayBackVV.onStop();
				}
			}
		});
		/**
		 * 快放
		 */
		mFPlayBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(mPlayBackVV.mplaystatus != PlayState.MPS_FAST) {
					mPlayBackVV.onPlayBackFast();
					mNetSdk.PlayBackControl(mlPlayHandle, MyConfig.PlayBackAction.SDK_PLAY_BACK_FAST, 2);
				}
			}
		});
		/**
		 * 慢放
		 */
		mSPlayBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
//				if(mPlayBackVV.mplaystatus != PlayState.MPS_SLOW) {
//					mPlayBackVV.onPlayBackSlow();
//					mNetSdk.PlayBackControl(mlPlayHandle, MyConfig.PlayBackAction.SDK_PLAY_BACK_SLOW, 2);
//				}
				mPlayBackVV.OnCapture(getApplicationContext(), Environment.getExternalStorageDirectory()+"/snapshot");
			}
		});
		mStopDlBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(mlDownLoadHandle > 0) {
					mNetSdk.StopGetFile(mlDownLoadHandle);
				}
			}
		});
	}
	/*
	 * 搜索录像文件
	 */
	private ArrayList<HashMap<String,Object>> onSearchFile() {
		ArrayList<HashMap<String,Object>> list = new ArrayList<HashMap<String,Object>>();
		for(int k = 0 ; k < 2; ++k) {
			FindInfo findInfo = new FindInfo();
			findInfo.nChannelN0 = k;
			findInfo.nFileType = 0;
			findInfo.startTime.year = 2013;
			findInfo.startTime.month = 12;
			findInfo.startTime.day = 27;
			findInfo.startTime.hour = 0;
			findInfo.endTime.year = 2013;
			findInfo.endTime.month = 12;
			findInfo.endTime.day = 27;
			findInfo.endTime.hour = 24;
			for(int i = 0 ; i < 50; ++i)
				mFileData[k][i] = new FileData();
			System.out.println("mLoginId:"+mLoginId);
			int count = mNetSdk.FindFile(mLoginId,findInfo, mFileData[k],50, 5000);
			for(int j = 0 ; j < count; ++j) {
				if(count < 50) {
					System.out.println("filename:"+mFileData[k][j].sFileName);
					HashMap<String, Object> map = new HashMap<String, Object>();
					map.put("filename", mFileData[k][j].sFileName);
					list.add(map);
				}else
					break;
			}
		}
		return list;
	}
	/*
     * 获得PCM音频数据参数
     */
	public AudioParam getAudioParam()
	{
		AudioParam audioParam = new AudioParam();
    	audioParam.mFrequency = 8000;
    	audioParam.mChannel = AudioFormat.CHANNEL_CONFIGURATION_MONO;
    	audioParam.mSampBit = AudioFormat.ENCODING_PCM_16BIT;
    	return audioParam;
	}
	private Handler myHandler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
		}
		
	};
}
